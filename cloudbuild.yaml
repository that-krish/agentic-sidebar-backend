# Cloud Build configuration for Chrome Extension Backend
# This template is designed for deployment to Cloud Run with GCP services integration

# Define substitution variables for flexibility
substitutions:
  # Service configuration
  _SERVICE_NAME: 'agentic-sidebar-backend'
  _REGION: 'us-central1'
  _PLATFORM: 'managed'
  
  # Container configuration
  _IMAGE_NAME: 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}'
  _TAG: '${SHORT_SHA}'
  
  # Cloud Run configuration
  _MEMORY: '512Mi'
  _CPU: '1'
  _CONCURRENCY: '100'
  _MAX_INSTANCES: '10'
  _MIN_INSTANCES: '0'
  _TIMEOUT: '300s'
  
  # Environment variables (add your specific ones here)
  _NODE_ENV: 'production'

# Build steps
steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '-t'
      - '${_IMAGE_NAME}:${_TAG}'
      - '-t'
      - '${_IMAGE_NAME}:latest'
      - '.'
    # Uncomment if you need to pass build args
    # env:
    #   - 'DOCKER_BUILDKIT=1'

  # Step 2: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '${_IMAGE_NAME}:${_TAG}'
    waitFor: ['build-image']

  # Step 3: Push latest tag
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args:
      - 'push'
      - '${_IMAGE_NAME}:latest'
    waitFor: ['build-image']

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-cloud-run'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_IMAGE_NAME}:${_TAG}'
      - '--region=${_REGION}'
      - '--platform=${_PLATFORM}'
      - '--memory=${_MEMORY}'
      - '--cpu=${_CPU}'
      - '--concurrency=${_CONCURRENCY}'
      - '--max-instances=${_MAX_INSTANCES}'
      - '--min-instances=${_MIN_INSTANCES}'
      - '--timeout=${_TIMEOUT}'
      - '--port=8080'
      - '--allow-unauthenticated'
      # Add environment variables
      - '--set-env-vars=NODE_ENV=${_NODE_ENV}'
      # Uncomment and modify as needed for your GCP services
      # - '--set-env-vars=DATABASE_URL=${_DATABASE_URL}'
      # - '--set-env-vars=REDIS_URL=${_REDIS_URL}'
      # - '--set-env-vars=PUBSUB_TOPIC=${_PUBSUB_TOPIC}'
      # Service account for accessing other GCP services
      # - '--service-account=${_SERVICE_ACCOUNT}'
    waitFor: ['push-image']

  # Step 5: Update traffic to new revision (optional - for blue/green deployment)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'update-traffic'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'services'
      - 'update-traffic'
      - '${_SERVICE_NAME}'
      - '--to-latest'
      - '--region=${_REGION}'
      - '--platform=${_PLATFORM}'
    waitFor: ['deploy-cloud-run']

# Additional build options
options:
  # Use higher CPU for faster builds
  machineType: 'E2_HIGHCPU_8'
  
  # Specify disk size if needed
  diskSizeGb: 100
  
  # Enable build logs
  logging: CLOUD_LOGGING_ONLY
  
  # Substitute variables in build
  substitution_option: 'ALLOW_LOOSE'

# Build timeout (maximum 24 hours)
timeout: '1200s'

# Uncomment if you want to run tests before deployment
# - name: 'node:18-alpine'
#   id: 'run-tests'
#   entrypoint: 'npm'
#   args: ['test']
#   waitFor: ['-']

# Uncomment for security scanning
# - name: 'gcr.io/cloud-builders/gcloud'
#   id: 'security-scan'
#   entrypoint: 'gcloud'
#   args:
#     - 'container'
#     - 'images'
#     - 'scan'
#     - '${_IMAGE_NAME}:${_TAG}'
#   waitFor: ['push-image']

# Images to be stored in Container Registry
images:
  - '${_IMAGE_NAME}:${_TAG}'
  - '${_IMAGE_NAME}:latest'

# Artifacts (optional - for storing build artifacts)
# artifacts:
#   objects:
#     location: 'gs://${PROJECT_ID}-build-artifacts'
#     paths: ['dist/**/*']

# Notification configuration (optional)
# availableSecrets:
#   secretManager:
#     - versionName: projects/$PROJECT_ID/secrets/slack-webhook/versions/latest
#       env: 'SLACK_WEBHOOK_URL'
